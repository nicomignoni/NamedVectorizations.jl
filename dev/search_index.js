var documenterSearchIndex = {"docs":
[{"location":"api/#NamedVectorizations.NV","page":"API","title":"NamedVectorizations.NV","text":"NV{T}(layout, vector)\n\nThe named vectorization core struct. \n\nFields\n\nvector::Vector - the Vector representing the concatenation of the vectorized Array and Scalar elements. \nlayout::NamedTuple - it defines the position and dimension of the Arrays comprising the NV with respect to the vectorized representation. Each key-value pair is (array_name => (array_size, start, stop)) where start and stop bound the vector chunk containing the vectorized Array. \n\n\n\n\n\n","category":"type"},{"location":"api/#NamedVectorizations.vector-Tuple{NV}","page":"API","title":"NamedVectorizations.vector","text":"vector(nv::NV)\n\nAlias for getfield(nv, :vector).\n\n\n\n\n\n","category":"method"},{"location":"api/#NamedVectorizations.layout-Tuple{NV}","page":"API","title":"NamedVectorizations.layout","text":"layout(nv::NV)\n\nAlias for getfield(nv, :layout).\n\n\n\n\n\n","category":"method"},{"location":"#NamedVectorizations.jl","page":"Home","title":"NamedVectorizations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Vectorization in Julia, made convenient.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/nicomignoni/NamedVectorizations.jl.git","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Named Vectorization (NV) is a Vector whose chunks represent the flattening of some defined Array or Number, which remain accessible as property. It's an expressive implementation of the vectorization operation, which is commonly used in mathematical modelling, system theory, and optimization. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using NamedVectorizations\n\nA = [4 5; 2 1]\nb = [9; -2]\nc = 7\n\nnv = NV(A=A, b=b, c=c)\nnothing #hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"nv","category":"page"},{"location":"","page":"Home","title":"Home","text":"NV vectorizes the passed parameters and stacks them, just like the usual vectorization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"nv == [vec(A); b; c]","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, you can still easily access the initial Array and Number constituting the NV as views. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"nv.A\nnv.b\nnv.c","category":"page"},{"location":"","page":"Home","title":"Home","text":"An NV is characterized by a vector, the internal representation of the vectorization","category":"page"},{"location":"","page":"Home","title":"Home","text":"vector(nv)","category":"page"},{"location":"","page":"Home","title":"Home","text":"and a layout, i.e., how the Arrays and Numbers are arranged in the NV.","category":"page"},{"location":"","page":"Home","title":"Home","text":"layout(nv)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Specifically, each Symbol of the NamedTuple points to a Tuple (size, start, end), where size is the size of the Array to be vectorized (() in case of a Number), while start and end indicate the slice of vector(nv) where the vectorized Array is placed. ","category":"page"}]
}
